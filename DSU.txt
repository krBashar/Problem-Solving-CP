#include<bits/stdc++.h>

using namespace std;

#define endl        "\n"
#define ll          long long
#define READ(x)     freopen(x,"r",stdin)
#define WRITE(x)    freopen(x,"w",stdout)
#define BOOST1       ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define pb          push_back
#define gcd(a, b)   __gcd(a, b)
#define lcm(a, b)   (a * b) / gcd(a, b)
#define mem(x,y)    memset(x,y,sizeof x )
#define srt(vec)    sort(vec.begin(), vec.end())
#define all(x)      x.begin(),x.end()
#define all(v)      v.begin(), v.end()
#define priority    vector<int>, greater<int>
#define uniqVec(x)  sort(all(x));x.erase(unique(all(x)),x.end())
#define for1(n) for(int i = 0; i < n;i++)
#define for2(n) for(int i = 1; i <= n;i++)
#define yes         printf("YES\n")
#define no          printf("NO\n")

const ll mod = 1000000007;
const int N = 1000000;




int parent[N];
int sizeA[N];

void make_set(int v) {
    parent[v] = v;
    sizeA[v] = 1;
}

int find_set(int v) {
    if (v == parent[v])
        return v;
    return parent[v] = find_set(parent[v]);
}

void union_sets(int a, int b) {
    a = find_set(a);
    b = find_set(b);
    if (a != b)
    {
        if(sizeA[a] < sizeA[b])
        {
            swap(a,b);
        }
        parent[b] = a;
        sizeA[a] += sizeA[b];
    }
}


/// Solution ###


int main()
{
    BOOST1;

    int a,b;
    string s;



    cin>>a;

    for(int i=1; i<=a; i++)
    {
        make_set(i);
    }

    int x,y;

    vector<int>vec,vec1;


    for(int i=1; i<a; i++)
    {
        cin>>x>>y;

        if(parent[x]==parent[y])
        {
            vec.pb(x);
            vec.pb(y);
        }
        else
        {
            union_sets(x,y);
        }
   //     union_sets(x,y);
    }

    if(a==2)
    {
        cout<<0<<endl;
        return 0;
    }

    ll count=0;
    for(int i=1; i<=a; i++)
    {
        if(find_set(parent[i])==i)
        {
            vec1.pb(i);
        }
    }

    cout<<vec1.size()-1<<endl;

    if(vec1.size()==1)
    {
       // cout<<0<<endl;
        return 0;
    }

    ll c = 0;
    for(int i=0; i<vec1.size(); i++)
    {
        cout<<vec[c]<<" "<<vec[c+1]<<" ";
        if(vec1[i]==vec[c] || vec1[i]==vec[c+1])
        {
            i++;
            cout<<vec[c+1]<<" "<<vec1[i]<<" ";
        }
        else
        {
            cout<<vec[c+1]<<" "<<vec1[i]<<" ";
        }
        c +=2;
        cout<<endl;
    }


  //  cout<<endl;



    return 0;
}

